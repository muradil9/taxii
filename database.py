from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import aiogram.utils.exceptions
import sqlite3
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7845697254:AAGsWAMPZ_tXWzhRHw7exPtGpO2civ4oMb4"
TAXI_GROUP_ID = -4678887716
ADMIN_ID = [6620133292, 5418350256]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAME = "@trading_mma"  # –ù–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_LINK = "https://t.me/+Z-cM4_F__5Q2ODUy"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
BANK_DETAILS = """
–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:
- –ë–∞–Ω–∫: Kaspi Bank
- –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: +7772319268
- –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ú—É—Ä–∞–¥–∏–ª –ú–∞—Ä—É–ø–æ–≤ 
"""

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite ===
conn = sqlite3.connect("taxi_bot.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# cursor.execute("""
# CREATE TABLE IF NOT EXISTS drivers (
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     user_id INTEGER UNIQUE,
#     name TEXT,
#     car_model TEXT,
#     phone TEXT,
#     balance INTEGER DEFAULT 0,
#     orders_completed INTEGER DEFAULT 0
# )
# """)
# conn.commit()
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    pickup TEXT,
    destination TEXT,
    phone TEXT,
    price INTEGER,
    status TEXT DEFAULT 'pending'
)
""")
conn.commit()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class OrderTaxi(StatesGroup):
    waiting_for_pickup = State()
    waiting_for_destination = State()
    waiting_for_price = State()
    waiting_for_phone = State()

class RegisterDriver(StatesGroup):
    waiting_for_name = State()
    waiting_for_car_model = State()
    waiting_for_phone = State()

class EditDriverProfile(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_new_car_model = State()
    waiting_for_new_phone = State()

class TopUpBalance(StatesGroup):
    waiting_for_phone = State()
    waiting_for_amount = State()
    
class AdminStates(StatesGroup):
    waiting_for_driver_phone = State()
    waiting_for_topup_amount = State()
    


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üßë‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º", "üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# === –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ===
@dp.message_handler(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await start_command(message)

# === –í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏ ===
@dp.message_handler(text="üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏")
async def start_taxi_order(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å:")
    await OrderTaxi.waiting_for_pickup.set()

@dp.message_handler(state=OrderTaxi.waiting_for_pickup)
async def pickup_handler(message: types.Message, state: FSMContext):
    await state.update_data(pickup=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –≤–∞—Å –æ—Ç–≤–µ–∑—Ç–∏:")
    await OrderTaxi.waiting_for_destination.set()

@dp.message_handler(state=OrderTaxi.waiting_for_destination)
async def destination_handler(message: types.Message, state: FSMContext):
    await state.update_data(destination=message.text)
    data = await state.get_data()
    pickup = data.get('pickup')
    destination = data.get('destination')
    phone = data.get('phone')
    price = data.get('price')
    if not pickup or not destination:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    phone_button = KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(phone_button)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard)
    await OrderTaxi.waiting_for_phone.set()

# @dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderTaxi.waiting_for_phone)
# async def phone_handler(message: types.Message, state: FSMContext):
#     if message.contact is None:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
#         return
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#     await state.update_data(phone=message.contact.phone_number)
#     await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–µ–∑–¥–∫—É? (–º–∏–Ω–∏–º—É–º 300):", reply_markup=types.ReplyKeyboardRemove())
#     await OrderTaxi.waiting_for_price.set()
    
@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderTaxi.waiting_for_phone)
async def phone_handler(message: types.Message, state: FSMContext):
    if message.contact is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–µ–∑–¥–∫—É? (–º–∏–Ω–∏–º—É–º 300):", reply_markup=types.ReplyKeyboardRemove())
    await OrderTaxi.waiting_for_price.set()


@dp.message_handler(state=OrderTaxi.waiting_for_price)
async def price_handler(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price < 300:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 300. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(price=price)
    data = await state.get_data()
    user_id = message.from_user.id
    pickup = data.get('pickup')
    destination = data.get('destination')
    phone = data.get('phone')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO orders (user_id, pickup, destination, phone, price, status) VALUES (?, ?, ?, ?, ?, ?)",
                   (user_id, pickup, destination, phone, price, 'pending'))
    conn.commit()

    await process_order(message, state)
    

async def process_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pickup = data.get('pickup')
    destination = data.get('destination')
    phone = data.get('phone')
    price = data.get('price')

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üöñ –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"take_order|{message.from_user.id}|{price}")
    )
    order_message = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üö© –û—Ç–∫—É–¥–∞: {pickup}\n"
        f"üèÅ –ö—É–¥–∞: {destination}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"üìû –ó–∞–∫–∞–∑—á–∏–∫: @{message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    try:
        await bot.send_message(TAXI_GROUP_ID, order_message, reply_markup=keyboard)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–∞–∫—Å–∏—Å—Ç–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏—Å—Ç–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    await state.finish()

    start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("/start"))
    await message.answer("–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /start", reply_markup=start_keyboard)



# === –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏—Å—Ç–æ–º ===
@dp.callback_query_handler(lambda c: c.data.startswith("take_order"))
async def take_order_handler(callback_query: types.CallbackQuery):
    driver_id = callback_query.from_user.id
    client_id, price = callback_query.data.split("|")[1], int(callback_query.data.split("|")[2])

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT pickup, destination, phone FROM orders WHERE user_id = ? AND price = ? AND status = 'pending'",
                   (client_id, price))
    order = cursor.fetchone()

    if not order:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
        return

    pickup, destination, phone = order

    cursor.execute("SELECT name, car_model, phone, balance, orders_completed FROM drivers WHERE user_id = ?", (driver_id,))
    driver = cursor.fetchone()

    if driver:
        name, car_model, driver_phone, balance, orders_completed = driver
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        required_balance = price * 0.1
        if balance < required_balance:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ 10% —Å –±–∞–ª–∞–Ω—Å–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("UPDATE drivers SET balance = balance - ?, orders_completed = orders_completed + 1 WHERE user_id = ?", (required_balance, driver_id))
        conn.commit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        cursor.execute("UPDATE orders SET status = 'accepted' WHERE user_id = ? AND price = ?", (client_id, price))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        driver_info = (
            f"üöñ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —Ç–∞–∫—Å–∏—Å—Ç–æ–º:\n"
            f"–ò–º—è: {name}\n"
            f"–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {car_model}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver_phone}"
        )
        await bot.send_message(client_id, driver_info)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–∞–∫—Å–∏—Å—Ç–∞
        client_info = (
            f"üö© –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:\n"
            f"–ò–º—è: @{callback_query.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
            f"–û—Ç–∫—É–¥–∞: {pickup}\n"
            f"–ö—É–¥–∞: {destination}\n"
            f"–¶–µ–Ω–∞: {price}\n"
        )
        await bot.send_message(driver_id, client_info)

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
        original_message_id = callback_query.message.message_id
        group_message = (
            f"üì¢ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–ª:\n"
            f"–¢–∞–∫—Å–∏—Å—Ç: {name} (@{callback_query.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})\n"
            f"–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {car_model}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver_phone}"
        )
        await bot.edit_message_text(
            chat_id=TAXI_GROUP_ID,
            message_id=original_message_id,
            text=group_message
        )

        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!")
    else:
        await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç–∞–∫—Å–∏—Å—Ç.", show_alert=True)
# === –ü—Ä–æ—Ñ–∏–ª—å —Ç–∞–∫—Å–∏—Å—Ç–∞ ===
@dp.message_handler(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def driver_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT name, car_model, phone, balance, orders_completed FROM drivers WHERE user_id = ?", (user_id,))
    driver = cursor.fetchone()

    if driver:
        name, car_model, phone, balance, orders_completed = driver
        profile_info = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {name}\n"
            f"–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {car_model}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ç–≥\n"
            f"üöñ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders_completed}"
        )
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        await message.answer(profile_info, reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç–∞–∫—Å–∏—Å—Ç. –ù–∞–∂–º–∏—Ç–µ 'üßë‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Ç–∞–∫—Å–∏—Å—Ç ===
@dp.message_handler(text="üßë‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º")
async def register_as_driver(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT user_id FROM drivers WHERE user_id = ?", (user_id,))
    existing_driver = cursor.fetchone()

    if existing_driver:
        await message.answer("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await RegisterDriver.waiting_for_name.set()

@dp.message_handler(state=RegisterDriver.waiting_for_name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await RegisterDriver.waiting_for_car_model.set()

@dp.message_handler(state=RegisterDriver.waiting_for_car_model)
async def register_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await RegisterDriver.waiting_for_phone.set()

@dp.message_handler(state=RegisterDriver.waiting_for_phone)
async def register_phone(message: types.Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)

    data = await state.get_data()
    cursor.execute("INSERT INTO drivers (user_id, name, car_model, phone) VALUES (?, ?, ?, ?)",
                   (message.from_user.id, data['name'], data['car_model'], data['phone']))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç–∞–∫—Å–∏—Å—Ç! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
    await message.answer(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {GROUP_LINK}")
    await state.finish()

# === –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ===
@dp.message_handler(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_driver_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT name, car_model, phone FROM drivers WHERE user_id = ?", (user_id,))
    driver = cursor.fetchone()

    if driver:
        name, car_model, phone = driver
        await message.answer(f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {car_model}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await EditDriverProfile.waiting_for_new_name.set()
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç–∞–∫—Å–∏—Å—Ç.")

@dp.message_handler(state=EditDriverProfile.waiting_for_new_name)
async def edit_name(message: types.Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await EditDriverProfile.waiting_for_new_car_model.set()

@dp.message_handler(state=EditDriverProfile.waiting_for_new_car_model)
async def edit_car_model(message: types.Message, state: FSMContext):
    await state.update_data(new_car_model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await EditDriverProfile.waiting_for_new_phone.set()

@dp.message_handler(state=EditDriverProfile.waiting_for_new_phone)
async def edit_phone(message: types.Message, state: FSMContext):
    new_phone = message.text
    await state.update_data(new_phone=new_phone)

    data = await state.get_data()
    cursor.execute("UPDATE drivers SET name = ?, car_model = ?, phone = ? WHERE user_id = ?",
                   (data['new_name'], data['new_car_model'], data['new_phone'], message.from_user.id))
    conn.commit()

    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.finish()

# === –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ===
@dp.message_handler(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def start_top_up_balance(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.answer(
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –Ω–∞ –∏–º—è {ADMIN_USERNAME}.\n\n{BANK_DETAILS}",
        reply_markup=keyboard
    )

# === –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ===
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    admin_keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üöñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"))
    admin_keyboard.add(KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"), KeyboardButton("$ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    admin_keyboard.add(KeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏"))

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏")
async def exit_admin_panel(message: types.Message):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(text="$ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def topup_balance(message: types.Message):
    if message.from_user.id not in ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–∞–∫—Å–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:")
    await AdminStates.waiting_for_driver_phone.set()

@dp.message_handler(state=AdminStates.waiting_for_driver_phone)
async def process_driver_phone(message: types.Message, state: FSMContext):
    phone = message.text
    cursor.execute("SELECT user_id, name FROM drivers WHERE phone = ?", (phone,))
    driver = cursor.fetchone()
    if driver is None:
        await message.answer("–¢–∞–∫—Å–∏—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    driver_id, driver_name = driver
    await state.update_data(driver_id=driver_id)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–∫—Å–∏—Å—Ç–∞ {driver_name}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    await AdminStates.waiting_for_topup_amount.set()

@dp.message_handler(state=AdminStates.waiting_for_topup_amount)
async def process_topup_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        data = await state.get_data()
        driver_id = data['driver_id']
        cursor.execute("UPDATE drivers SET balance = balance + ? WHERE user_id = ?", (amount, driver_id))
        conn.commit()
        await message.answer(f"–ë–∞–ª–∞–Ω—Å —Ç–∞–∫—Å–∏—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–≥.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–∞–∫—Å–∏—Å—Ç–∞ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        try:
            await bot.send_message(driver_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–≥. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {amount} —Ç–≥.")
        except aiogram.utils.exceptions.ChatNotFound:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∞–∫—Å–∏—Å—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
